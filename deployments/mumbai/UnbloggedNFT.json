{
  "address": "0x32b8ED4F44065c13B60fe93D47A1f8E86125DA7a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "defaultImage",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag_1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag_2",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag_3",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsCid",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tablelandURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
  "receipt": {
    "to": null,
    "from": "0x2C1CC2df33B3EC74Cc4fD83B539789f79f5c797B",
    "contractAddress": "0x32b8ED4F44065c13B60fe93D47A1f8E86125DA7a",
    "transactionIndex": 2,
    "gasUsed": "2088631",
    "logsBloom": "0x00000000000000020000000000000000000000000000000000800000000008000000000000040000000000000000000000008000000000100000000000000004000000000000000000010008000000800001000000000000000100000200000000000000020000000000000000000800000000000000008280000010000508400000000000000000000000040000000000000000000000000000000000000000200000002000000020000000000000000001000000000000000000000000104000000002000000000001000001040000000000000000000000100000000020000400000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x25e2196a1bb810d6b45f3e19deb352d3fdc184c3ed8605d57dd9592c6de1e91b",
    "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 27214617,
        "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
        "address": "0x32b8ED4F44065c13B60fe93D47A1f8E86125DA7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c1cc2df33b3ec74cc4fd83b539789f79f5c797b"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x25e2196a1bb810d6b45f3e19deb352d3fdc184c3ed8605d57dd9592c6de1e91b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 27214617,
        "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032b8ed4f44065c13b60fe93d47a1f8e86125da7a",
          "0x0000000000000000000000000000000000000000000000000000000000000104"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x25e2196a1bb810d6b45f3e19deb352d3fdc184c3ed8605d57dd9592c6de1e91b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 27214617,
        "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
        "address": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000032b8ed4f44065c13b60fe93d47a1f8e86125da7a00000000000000000000000000000000000000000000000000000000000001040000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008e435245415445205441424c4520756e626c6f676765645f6861636b66735f3830303031202861727469636c65496420696e742c207469746c6520746578742c207461675f3120746578742c207461675f3220746578742c207461675f3320746578742c20617574686f7220746578742c206970667343696420746578742c2074696d657374616d7020696e74293b000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x25e2196a1bb810d6b45f3e19deb352d3fdc184c3ed8605d57dd9592c6de1e91b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 27214617,
        "transactionHash": "0xed77913d46c7967e7bebb73002faadcebb2b2e504c4b938dac8f44d7478c7b0b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002c1cc2df33b3ec74cc4fd83b539789f79f5c797b",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d38204dd65231c0000000000000000000000000000000000000000000000007be2ee09e75017ab0000000000000000000000000000000000000000000011b7b24d74b59ae0f84a0000000000000000000000000000000000000000000000007b0f6c0509eaf48f0000000000000000000000000000000000000000000011b7b320f6ba78461b66",
        "logIndex": 9,
        "blockHash": "0x25e2196a1bb810d6b45f3e19deb352d3fdc184c3ed8605d57dd9592c6de1e91b"
      }
    ],
    "blockNumber": 27214617,
    "cumulativeGasUsed": "2424987",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
    "ipfs://bafkreicbxyxbbip2ustrh7vp6ce565jyt5wnsid3bmrnbor7ngsqpe7fqu"
  ],
  "numDeployments": 6,
  "solcInputHash": "8942fb7a106c4ccaef7dad6f741b520c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"defaultImage\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag_1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag_2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag_3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsCid\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tablelandURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(string,string,string,string,string)\":{\"details\":\"mint allows anyone to mint a token in this project. Any time a token is minted, a new row of metadata will be dynamically inserted into the metadata table.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"tokenURI is an example of how to turn a row in your table back into erc721 compliant metadata JSON. Here, we do a simple SELECT statement with function that converts the result into json.\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see `_totalMinted`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"tablelandURI(uint256)\":{\"notice\":\"Get the URL String of the tableland query\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UnbloggedNFT.sol\":\"UnbloggedNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf82090d06cc06c498ae5847e389e1fe8cef231e9cf19f81fee476cf581e4519d\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.1.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC721A.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token receiver interface.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\r\\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at `_startTokenId()`\\r\\n * (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n    // The bit position of `extraData` in packed ownership.\\r\\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\r\\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\r\\n\\r\\n    // The mask of the lower 160 bits for addresses.\\r\\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\\r\\n    // This limit is to prevent overflows on the address data entries.\\r\\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\\r\\n    // is required to cause an overflow, which is unrealistic.\\r\\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See `_packedOwnershipOf` implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    // - [232..255] `extraData`\\r\\n    mapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID.\\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view virtual returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count.\\r\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view virtual returns (uint256) {\\r\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view virtual returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\r\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\r\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) &\\r\\n            BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) &\\r\\n            BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view virtual returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal virtual {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        // Cast `aux` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() <= curr)\\r\\n                if (curr < _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed & BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an ownership that has an address and is not burned\\r\\n                        // before an ownership that does not have an address and is not burned.\\r\\n                        // Hence, curr will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed is zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed)\\r\\n        private\\r\\n        pure\\r\\n        returns (TokenOwnership memory ownership)\\r\\n    {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\r\\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Packs ownership data into a single uint256.\\r\\n     */\\r\\n    function _packOwnershipData(address owner, uint256 flags)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        assembly {\\r\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            owner := and(owner, BITMASK_ADDRESS)\\r\\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\\r\\n            result := or(\\r\\n                owner,\\r\\n                or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags)\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length != 0\\r\\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, it can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\r\\n     */\\r\\n    function _nextInitializedFlag(uint256 quantity)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        // For branchless setting of the `nextInitialized` flag.\\r\\n        assembly {\\r\\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\\r\\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\r\\n\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return\\r\\n            _startTokenId() <= tokenId &&\\r\\n            tokenId < _currentIndex && // If within bounds,\\r\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * See {_mint}.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, quantity);\\r\\n\\r\\n        unchecked {\\r\\n            if (to.code.length != 0) {\\r\\n                uint256 end = _currentIndex;\\r\\n                uint256 index = end - quantity;\\r\\n                do {\\r\\n                    if (\\r\\n                        !_checkContractOnERC721Received(\\r\\n                            address(0),\\r\\n                            to,\\r\\n                            index++,\\r\\n                            _data\\r\\n                        )\\r\\n                    ) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (index < end);\\r\\n                // Reentrancy protection.\\r\\n                if (_currentIndex != end) revert();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event for each mint.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n        // `tokenId` has a maximum limit of 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) |\\r\\n                    _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            uint256 tokenId = startTokenId;\\r\\n            uint256 end = startTokenId + quantity;\\r\\n            do {\\r\\n                emit Transfer(address(0), to, tokenId++);\\r\\n            } while (tokenId < end);\\r\\n\\r\\n            _currentIndex = end;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * This function is intended for efficient minting only during contract creation.\\r\\n     *\\r\\n     * It emits only one {ConsecutiveTransfer} as defined in\\r\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n     * instead of a sequence of {Transfer} event(s).\\r\\n     *\\r\\n     * Calling this function outside of contract creation WILL make your contract\\r\\n     * non-compliant with the ERC721 standard.\\r\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {ConsecutiveTransfer} event.\\r\\n     */\\r\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT)\\r\\n            revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the `balance` and `numberMinted`.\\r\\n            _packedAddressData[to] +=\\r\\n                quantity *\\r\\n                ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                _nextInitializedFlag(quantity) |\\r\\n                    _nextExtraData(address(0), to, 0)\\r\\n            );\\r\\n\\r\\n            emit ConsecutiveTransfer(\\r\\n                startTokenId,\\r\\n                startTokenId + quantity - 1,\\r\\n                address(0),\\r\\n                to\\r\\n            );\\r\\n\\r\\n            _currentIndex = startTokenId + quantity;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n     */\\r\\n    function _getApprovedAddress(uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\r\\n    {\\r\\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\\r\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\r\\n        assembly {\\r\\n            // Compute the slot.\\r\\n            mstore(0x00, tokenId)\\r\\n            mstore(0x20, tokenApprovalsPtr.slot)\\r\\n            approvedAddressSlot := keccak256(0x00, 0x40)\\r\\n            // Load the slot's value from storage.\\r\\n            approvedAddress := sload(approvedAddressSlot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\\r\\n     */\\r\\n    function _isOwnerOrApproved(\\r\\n        address approvedAddress,\\r\\n        address from,\\r\\n        address msgSender\\r\\n    ) private pure returns (bool result) {\\r\\n        assembly {\\r\\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            from := and(from, BITMASK_ADDRESS)\\r\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n            msgSender := and(msgSender, BITMASK_ADDRESS)\\r\\n            // `msgSender == from || msgSender == approvedAddress`.\\r\\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from)\\r\\n            revert TransferFromIncorrectOwner();\\r\\n\\r\\n        (\\r\\n            uint256 approvedAddressSlot,\\r\\n            address approvedAddress\\r\\n        ) = _getApprovedAddress(tokenId);\\r\\n\\r\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\r\\n            if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n                revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                to,\\r\\n                BITMASK_NEXT_INITIALIZED |\\r\\n                    _nextExtraData(from, to, prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        (\\r\\n            uint256 approvedAddressSlot,\\r\\n            address approvedAddress\\r\\n        ) = _getApprovedAddress(tokenId);\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\r\\n                if (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n                    revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        assembly {\\r\\n            if approvedAddress {\\r\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n                sstore(approvedAddressSlot, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\r\\n                from,\\r\\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) |\\r\\n                    _nextExtraData(from, address(0), prevOwnershipPacked)\\r\\n            );\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try\\r\\n            ERC721A__IERC721Receiver(to).onERC721Received(\\r\\n                _msgSenderERC721A(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            )\\r\\n        returns (bytes4 retval) {\\r\\n            return\\r\\n                retval ==\\r\\n                ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Directly sets the extra data for the ownership data `index`.\\r\\n     */\\r\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\r\\n        uint256 packed = _packedOwnerships[index];\\r\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\r\\n        uint256 extraDataCasted;\\r\\n        // Cast `extraData` with assembly to avoid redundant masking.\\r\\n        assembly {\\r\\n            extraDataCasted := extraData\\r\\n        }\\r\\n        packed =\\r\\n            (packed & BITMASK_EXTRA_DATA_COMPLEMENT) |\\r\\n            (extraDataCasted << BITPOS_EXTRA_DATA);\\r\\n        _packedOwnerships[index] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next extra data for the packed ownership data.\\r\\n     * The returned result is shifted into position.\\r\\n     */\\r\\n    function _nextExtraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 prevOwnershipPacked\\r\\n    ) private view returns (uint256) {\\r\\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\\r\\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n     * Intended to be overridden by the cosumer contract.\\r\\n     *\\r\\n     * `previousExtraData` - the value of `extraData` before transfer.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _extraData(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint24 previousExtraData\\r\\n    ) internal view virtual returns (uint24) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\\r\\n     * This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\\r\\n     * This includes minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value)\\r\\n        internal\\r\\n        pure\\r\\n        virtual\\r\\n        returns (string memory ptr)\\r\\n    {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\r\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\r\\n            // We will need 1 32-byte word to store the length,\\r\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\r\\n            ptr := add(mload(0x40), 128)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, ptr)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := ptr\\r\\n\\r\\n            // We write the string from the rightmost digit to the leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // Costs a bit more than early returning for the zero case,\\r\\n            // but cheaper in terms of deployment and overall runtime costs.\\r\\n            for {\\r\\n                // Initialize and perform the first pass without check.\\r\\n                let temp := value\\r\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\r\\n                ptr := sub(ptr, 1)\\r\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n                temp := div(temp, 10)\\r\\n            } temp {\\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n            } {\\r\\n                // Body of the for loop.\\r\\n                ptr := sub(ptr, 1)\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n            }\\r\\n\\r\\n            let length := sub(end, ptr)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            ptr := sub(ptr, 32)\\r\\n            // Store the length.\\r\\n            mstore(ptr, length)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6c48ad62144eac41e2d16cd6eccac6c8c4931d9f8591b9c2a7731340d20a1d11\",\"license\":\"MIT\"},\"contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.1.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of an ERC721A compliant contract.\\r\\n */\\r\\ninterface IERC721A {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller cannot approve to their own address.\\r\\n     */\\r\\n    error ApproveToCaller();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n     */\\r\\n    error MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n    /**\\r\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\r\\n     */\\r\\n    error OwnershipNotInitializedForExtraData();\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\r\\n        uint24 extraData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     *\\r\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // ==============================\\r\\n    //            IERC165\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    // ==============================\\r\\n    //            IERC721\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    // ==============================\\r\\n    //        IERC721Metadata\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    // ==============================\\r\\n    //            IERC2309\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\r\\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\r\\n     */\\r\\n    event ConsecutiveTransfer(\\r\\n        uint256 indexed fromTokenId,\\r\\n        uint256 toTokenId,\\r\\n        address indexed from,\\r\\n        address indexed to\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xbb15c6a4ce0cf979c70078fff3874ced28ef60ebbb7d536aa7e4714888ed335d\",\"license\":\"MIT\"},\"contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of a TablelandController compliant contract.\\r\\n *\\r\\n * This interface can be implemented to enabled advanced access control for a table.\\r\\n * Call {ITablelandTables-setController} with the address of your implementation.\\r\\n *\\r\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\r\\n */\\r\\ninterface ITablelandController {\\r\\n    /**\\r\\n     * @dev Object defining how a table can be accessed.\\r\\n     */\\r\\n    struct Policy {\\r\\n        // Whether or not the table should allow SQL INSERT statements.\\r\\n        bool allowInsert;\\r\\n        // Whether or not the table should allow SQL UPDATE statements.\\r\\n        bool allowUpdate;\\r\\n        // Whether or not the table should allow SQL DELETE statements.\\r\\n        bool allowDelete;\\r\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\r\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\r\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\r\\n        // This can be useful for limiting how a table can be modified.\\r\\n        // Use {Policies-joinClauses} to include more than one condition.\\r\\n        string whereClause;\\r\\n        // A conditional clause used with SQL INSERT statements.\\r\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\r\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\r\\n        // This can be useful for limiting how table data ban be added.\\r\\n        // Use {Policies-joinClauses} to include more than one condition.\\r\\n        string withCheck;\\r\\n        // A list of SQL column names that can be updated.\\r\\n        string[] updatableColumns;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\r\\n     */\\r\\n    function getPolicy(address caller) external payable returns (Policy memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x88c61e8ac9baa021f5ea634ec641ab9b0422e5e341fe23204ac03ffeb78bfcfe\",\"license\":\"MIT\"},\"contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./ITablelandController.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of a TablelandTables compliant contract.\\r\\n */\\r\\ninterface ITablelandTables {\\r\\n    /**\\r\\n     * The caller is not authorized.\\r\\n     */\\r\\n    error Unauthorized();\\r\\n\\r\\n    /**\\r\\n     * RunSQL was called with a query length greater than maximum allowed.\\r\\n     */\\r\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` creates a new table.\\r\\n     *\\r\\n     * owner - the to-be owner of the table\\r\\n     * tableId - the table id of the new table\\r\\n     * statement - the SQL statement used to create the table\\r\\n     */\\r\\n    event CreateTable(address owner, uint256 tableId, string statement);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\r\\n     *\\r\\n     * Not emmitted when a table is created.\\r\\n     * Also emitted after a table has been burned.\\r\\n     *\\r\\n     * from - the address that transfered the table\\r\\n     * to - the address that received the table\\r\\n     * tableId - the table id that was transferred\\r\\n     */\\r\\n    event TransferTable(address from, address to, uint256 tableId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `caller` runs a SQL statement.\\r\\n     *\\r\\n     * caller - the address that is running the SQL statement\\r\\n     * isOwner - whether or not the caller is the table owner\\r\\n     * tableId - the id of the target table\\r\\n     * statement - the SQL statement to run\\r\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\r\\n     */\\r\\n    event RunSQL(\\r\\n        address caller,\\r\\n        bool isOwner,\\r\\n        uint256 tableId,\\r\\n        string statement,\\r\\n        ITablelandController.Policy policy\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a table's controller is set.\\r\\n     *\\r\\n     * tableId - the id of the target table\\r\\n     * controller - the address of the controller (EOA or contract)\\r\\n     */\\r\\n    event SetController(uint256 tableId, address controller);\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\r\\n     *\\r\\n     * owner - the to-be owner of the new table\\r\\n     * statement - the SQL statement used to create the table\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - contract must be unpaused\\r\\n     */\\r\\n    function createTable(address owner, string memory statement)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\r\\n     *\\r\\n     * caller - the address that is running the SQL statement\\r\\n     * tableId - the id of the target table\\r\\n     * statement - the SQL statement to run\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - contract must be unpaused\\r\\n     * - `msg.sender` must be `caller` or contract owner\\r\\n     * - `tableId` must exist\\r\\n     * - `caller` must be authorized by the table controller\\r\\n     * - `statement` must be less than or equal to 35000 bytes\\r\\n     */\\r\\n    function runSQL(\\r\\n        address caller,\\r\\n        uint256 tableId,\\r\\n        string memory statement\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\r\\n     *\\r\\n     * When a table is created, it's controller is set to the zero address, which means that the\\r\\n     * contract will not enforce write access control. In this situation, validators will not accept\\r\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\r\\n     *\\r\\n     * When a controller address is set for a table, validators assume write access control is\\r\\n     * handled at the contract level, and will accept all transactions.\\r\\n     *\\r\\n     * You can unset a controller address for a table by setting it back to the zero address.\\r\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\r\\n     *\\r\\n     * caller - the address that is setting the controller\\r\\n     * tableId - the id of the target table\\r\\n     * controller - the address of the controller (EOA or contract)\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - contract must be unpaused\\r\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\r\\n     * - `tableId` must exist\\r\\n     * - `tableId` controller must not be locked\\r\\n     */\\r\\n    function setController(\\r\\n        address caller,\\r\\n        uint256 tableId,\\r\\n        address controller\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the controller for a table.\\r\\n     *\\r\\n     * tableId - the id of the target table\\r\\n     */\\r\\n    function getController(uint256 tableId) external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\r\\n     *\\r\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\r\\n     *\\r\\n     * caller - the address that is locking the controller\\r\\n     * tableId - the id of the target table\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - contract must be unpaused\\r\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\r\\n     * - `tableId` must exist\\r\\n     * - `tableId` controller must not be locked\\r\\n     */\\r\\n    function lockController(address caller, uint256 tableId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the contract base URI.\\r\\n     *\\r\\n     * baseURI - the new base URI\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `msg.sender` must be contract owner\\r\\n     */\\r\\n    function setBaseURI(string memory baseURI) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Pauses the contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `msg.sender` must be contract owner\\r\\n     * - contract must be unpaused\\r\\n     */\\r\\n    function pause() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Unpauses the contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `msg.sender` must be contract owner\\r\\n     * - contract must be paused\\r\\n     */\\r\\n    function unpause() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9b7a9b6d058fd5b1e7c59e159b90dade324fbcead56254dca39ea6b521282702\",\"license\":\"MIT\"},\"contracts/UnbloggedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"./ITablelandTables.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\ncontract UnbloggedNFT is ERC721A, Ownable {\\r\\n    using Strings for uint256;\\r\\n    // Our will be pulled from the network\\r\\n    string private _baseURIString =\\r\\n        \\\"https://testnet.tableland.network/query?s=\\\";\\r\\n\\r\\n    ITablelandTables private _tableland;\\r\\n    string private _metadataTable;\\r\\n    uint256 private _metadataTableId;\\r\\n    string private _tablePrefix = \\\"unblogged_hackfs_\\\";\\r\\n    string private _defaultNFTImage;\\r\\n    mapping(string => bool) private cidMinted;\\r\\n\\r\\n    // Called only when the smart contract is created\\r\\n    constructor(address registry, string memory defaultImage)\\r\\n        ERC721A(\\\"UnbloggedNFT\\\", \\\"UBG\\\")\\r\\n    {\\r\\n        // Setup steps in our smart contract\\r\\n        _tableland = ITablelandTables(registry); // Polygon Mumbai Registry: 0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68\\r\\n\\r\\n        // Stores the unique ID for the newly created table\\r\\n        // On tags: https://stackoverflow.com/questions/2885564/ways-to-implement-tags-pros-and-cons-of-each\\r\\n        _metadataTableId = _tableland.createTable(\\r\\n            address(this),\\r\\n            string.concat(\\r\\n                \\\"CREATE TABLE \\\",\\r\\n                _tablePrefix,\\r\\n                Strings.toString(block.chainid),\\r\\n                \\\" (articleId int, title text, tag_1 text, tag_2 text, tag_3 text, author text, ipfsCid text, timestamp int);\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Stores the full tablename for the new table. {prefix}_{chainid}_{tableid}\\r\\n        _metadataTable = string.concat(\\r\\n            _tablePrefix,\\r\\n            Strings.toString(block.chainid),\\r\\n            \\\"_\\\",\\r\\n            Strings.toString(_metadataTableId)\\r\\n        );\\r\\n\\r\\n        _defaultNFTImage = defaultImage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev mint allows anyone to mint a token in this project.\\r\\n     * Any time a token is minted, a new row of metadata will be\\r\\n     * dynamically inserted into the metadata table.\\r\\n     */\\r\\n    function mint(\\r\\n        string memory title,\\r\\n        string memory tag_1,\\r\\n        string memory tag_2,\\r\\n        string memory tag_3,\\r\\n        string memory ipfsCid\\r\\n    ) public {\\r\\n        require(\\r\\n            !cidMinted[ipfsCid],\\r\\n            \\\"UnbloggedNFT: CID has already been minted!\\\"\\r\\n        );\\r\\n        uint256 _nextTokenId;\\r\\n        /* Any table updates will go here */\\r\\n        _tableland.runSQL(\\r\\n            address(this),\\r\\n            _metadataTableId,\\r\\n            string.concat(\\r\\n                \\\"INSERT INTO \\\",\\r\\n                _metadataTable,\\r\\n                \\\" (articleId, title, tag_1, tag_2, tag_3, author, ipfsCid) VALUES (\\\",\\r\\n                Strings.toString(_nextTokenId),\\r\\n                \\\", '\\\",\\r\\n                title,\\r\\n                \\\"', '\\\",\\r\\n                tag_1,\\r\\n                \\\"', '\\\",\\r\\n                tag_2,\\r\\n                \\\"', '\\\",\\r\\n                tag_3,\\r\\n                \\\"', '\\\",\\r\\n                Strings.toHexString(uint256(uint160(msg.sender)), 20),\\r\\n                \\\"', '\\\",\\r\\n                ipfsCid,\\r\\n                \\\"', '\\\",\\r\\n                Strings.toString(block.timestamp),\\r\\n                \\\"')\\\"\\r\\n            )\\r\\n        );\\r\\n        _safeMint(msg.sender, 1);\\r\\n        cidMinted[ipfsCid] = true;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseURIString;\\r\\n    }\\r\\n\\r\\n    function metadataURI() public view returns (string memory) {\\r\\n        string memory base = _baseURI();\\r\\n        return string.concat(base, \\\"SELECT%20*%20FROM%20\\\", _metadataTable);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev tokenURI is an example of how to turn a row in your table back into\\r\\n     * erc721 compliant metadata JSON. Here, we do a simple SELECT statement\\r\\n     * with function that converts the result into json.\\r\\n     */\\r\\n    // Fitted for OPENSEA VIEWING\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        bytes memory m1 = abi.encodePacked(\\r\\n            '{\\\"name\\\":\\\"Unblogged Article #',\\r\\n            Strings.toString(tokenId),\\r\\n            '\\\", \\\"description\\\":\\\"Unblogged Article #', //TODO: Link to article\\r\\n            Strings.toString(tokenId),\\r\\n            '\\\", \\\"image\\\": \\\"',\\r\\n            _defaultNFTImage,\\r\\n            '\\\"}'\\r\\n        );\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(bytes.concat(m1))\\r\\n                )\\r\\n            );\\r\\n\\r\\n        // /* We will give token viewers a way to get at our table metadata */\\r\\n        // return;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the URL String of the tableland query\\r\\n     */\\r\\n    function tablelandURI(uint256 tokenId) public view returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory base = _baseURI();\\r\\n        string memory query = string.concat(\\r\\n            \\\"SELECT%20*%20FROM%20\\\",\\r\\n            _metadataTable,\\r\\n            \\\"%20WHERE%20articleId=\\\",\\r\\n            Strings.toString(tokenId)\\r\\n        );\\r\\n\\r\\n        return string.concat(base, query);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f736970859e59b09c074ba3bdca7eea67f9edc531b9a78331e9b12869662d51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052602a608081815290620025c560a03980516200002991600991602090910190620003ce565b5060408051808201909152601180825270756e626c6f676765645f6861636b66735f60781b60209092019182526200006491600d91620003ce565b503480156200007257600080fd5b50604051620025ef380380620025ef8339810160408190526200009591620004bd565b604080518082018252600c81526b155b989b1bd9d9d95913919560a21b60208083019182528351808501909452600384526255424760e81b908401528151919291620000e491600291620003ce565b508051620000fa906003906020840190620003ce565b505060008055506200010c336200025f565b600a80546001600160a01b0319166001600160a01b038416908117909155633a9151b030600d6200014946620002b1602090811b62000b3017901c565b6040516020016200015c92919062000677565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200018a9291906200073e565b6020604051808303816000875af1158015620001aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d0919062000782565b600c81905550600d620001ee46620002b160201b62000b301760201c565b62000206600c54620002b160201b62000b301760201c565b6040516020016200021a939291906200079c565b604051602081830303815290604052600b908051906020019062000240929190620003ce565b5080516200025690600e906020840190620003ce565b505050620008ab565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606081620002d65750506040805180820190915260018152600360fc1b602082015290565b8160005b8115620003065780620002ed81620007fe565b9150620002fe9050600a8362000832565b9150620002da565b6000816001600160401b0381111562000323576200032362000474565b6040519080825280601f01601f1916602001820160405280156200034e576020820181803683370190505b5090505b8415620003c6576200036660018362000849565b915062000375600a8662000863565b620003829060306200087a565b60f81b8183815181106200039a576200039a62000895565b60200101906001600160f81b031916908160001a905350620003be600a8662000832565b945062000352565b949350505050565b828054620003dc9062000598565b90600052602060002090601f0160209004810192826200040057600085556200044b565b82601f106200041b57805160ff19168380011785556200044b565b828001600101855582156200044b579182015b828111156200044b5782518255916020019190600101906200042e565b50620004599291506200045d565b5090565b5b808211156200045957600081556001016200045e565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004a75781810151838201526020016200048d565b83811115620004b7576000848401525b50505050565b60008060408385031215620004d157600080fd5b82516001600160a01b0381168114620004e957600080fd5b60208401519092506001600160401b03808211156200050757600080fd5b818501915085601f8301126200051c57600080fd5b81518181111562000531576200053162000474565b604051601f8201601f19908116603f011681019083821181831017156200055c576200055c62000474565b816040528281528860208487010111156200057657600080fd5b620005898360208301602088016200048a565b80955050505050509250929050565b600181811c90821680620005ad57607f821691505b60208210811415620005cf57634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c9080831680620005f057607f831692505b60208084108214156200061357634e487b7160e01b600052602260045260246000fd5b8180156200062a57600181146200063c576200066b565b60ff198616895284890196506200066b565b60008881526020902060005b86811015620006635781548b82015290850190830162000648565b505084890196505b50505050505092915050565b6c021a922a0aa22902a20a126229609d1b815260006200069b600d830185620005d5565b8351620006ad8183602088016200048a565b7f202861727469636c65496420696e742c207469746c6520746578742c2074616791019081527f5f3120746578742c207461675f3220746578742c207461675f3320746578742c60208201527f20617574686f7220746578742c206970667343696420746578742c2074696d6560408201526a7374616d7020696e74293b60a81b6060820152606b01949350505050565b60018060a01b038316815260406020820152600082518060408401526200076d8160608501602087016200048a565b601f01601f1916919091016060019392505050565b6000602082840312156200079557600080fd5b5051919050565b6000620007aa8286620005d5565b8451620007bc8183602089016200048a565b605f60f81b91019081528351620007db8160018401602088016200048a565b0160010195945050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415620008155762000815620007e8565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826200084457620008446200081c565b500490565b6000828210156200085e576200085e620007e8565b500390565b6000826200087557620008756200081c565b500690565b60008219821115620008905762000890620007e8565b500190565b634e487b7160e01b600052603260045260246000fd5b611d0a80620008bb6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b806370a0823114610218578063715018a61461022b57806386833e91146102335780638da5cb5b1461024657806395d89b411461025757600080fd5b806318160ddd116100f457806318160ddd146101b657806323b872dd146101cc57806342842e0e146101df578063456fb54c146101f25780636352211e1461020557600080fd5b806301ffc9a71461013157806303ee438c1461015957806306fdde031461016e578063081812fc14610176578063095ea7b3146101a1575b600080fd5b61014461013f3660046112ea565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061135f565b610161610370565b610189610184366004611372565b610402565b6040516001600160a01b039091168152602001610150565b6101b46101af3660046113a7565b610446565b005b600154600054035b604051908152602001610150565b6101b46101da3660046113d1565b6104e6565b6101b46101ed3660046113d1565b610677565b610161610200366004611372565b610697565b610189610213366004611372565b61072d565b6101be61022636600461140d565b610738565b6101b4610787565b6101b46102413660046114d4565b61079b565b6008546001600160a01b0316610189565b610161610919565b6101b461026d3660046115a6565b610928565b6101b46102803660046115e2565b6109be565b610161610293366004611372565b610a08565b6101446102a636600461165e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6101b46102e236600461140d565b610ab7565b60006301ffc9a760e01b6001600160e01b03198316148061031857506380ac58cd60e01b6001600160e01b03198316145b806103335750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606000610345610c36565b905080600b60405160200161035b929190611782565b60405160208183030381529060405291505090565b60606002805461037f906116ad565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906116ad565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050905090565b600061040d82610c45565b61042a576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006104518261072d565b9050336001600160a01b0382161461048a5761046d81336102a6565b61048a576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006104f182610c6c565b9050836001600160a01b0316816001600160a01b0316146105245760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b038816909114176105715761055486336102a6565b61057157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661059857604051633a954ecd60e21b815260040160405180910390fd5b80156105a357600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b831661062e576001840160008181526004602052604090205461062c57600054811461062c5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b610692838383604051806020016040528060008152506109be565b505050565b60606106a282610c45565b6106c75760405162461bcd60e51b81526004016106be906117c8565b60405180910390fd5b60006106d1610c36565b90506000600b6106e085610b30565b6040516020016106f1929190611819565b6040516020818303038152906040529050818160405160200161071592919061187c565b60405160208183030381529060405292505050919050565b600061033382610c6c565b60006001600160a01b038216610761576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b61078f610cd4565b6107996000610d2e565b565b600f816040516107ab91906118ab565b9081526040519081900360200190205460ff161561081e5760405162461bcd60e51b815260206004820152602a60248201527f556e626c6f676765644e46543a204349442068617320616c7265616479206265604482015269656e206d696e7465642160b01b60648201526084016106be565b600a54600c546000916001600160a01b03169063eaf5d04e903090600b61084486610b30565b8b8b8b8b610853336014610d80565b8c61085d42610b30565b604051602001610875999897969594939291906118c7565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108a293929190611a24565b600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b505050506108df336001610f1c565b6001600f836040516108f191906118ab565b908152604051908190036020019020805491151560ff19909216919091179055505050505050565b60606003805461037f906116ad565b6001600160a01b0382163314156109525760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109c98484846104e6565b6001600160a01b0383163b15610a02576109e584848484610f3a565b610a02576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610a1382610c45565b610a2f5760405162461bcd60e51b81526004016106be906117c8565b6000610a3a83610b30565b610a4384610b30565b600e604051602001610a5793929190611a4b565b6040516020818303038152906040529050610a9081604051602001610a7c91906118ab565b604051602081830303815290604052611022565b604051602001610aa09190611b0b565b604051602081830303815290604052915050919050565b610abf610cd4565b6001600160a01b038116610b245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106be565b610b2d81610d2e565b50565b606081610b545750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b7e5780610b6881611b66565b9150610b779050600a83611b97565b9150610b58565b60008167ffffffffffffffff811115610b9957610b99611428565b6040519080825280601f01601f191660200182016040528015610bc3576020820181803683370190505b5090505b8415610c2e57610bd8600183611bab565b9150610be5600a86611bc2565b610bf0906030611bd6565b60f81b818381518110610c0557610c05611bee565b60200101906001600160f81b031916908160001a905350610c27600a86611b97565b9450610bc7565b949350505050565b60606009805461037f906116ad565b6000805482108015610333575050600090815260046020526040902054600160e01b161590565b600081600054811015610cbb57600081815260046020526040902054600160e01b8116610cb9575b80610cb2575060001901600081815260046020526040902054610c94565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6008546001600160a01b031633146107995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106be565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610d8f836002611c04565b610d9a906002611bd6565b67ffffffffffffffff811115610db257610db2611428565b6040519080825280601f01601f191660200182016040528015610ddc576020820181803683370190505b509050600360fc1b81600081518110610df757610df7611bee565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610e2657610e26611bee565b60200101906001600160f81b031916908160001a9053506000610e4a846002611c04565b610e55906001611bd6565b90505b6001811115610ecd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610e8957610e89611bee565b1a60f81b828281518110610e9f57610e9f611bee565b60200101906001600160f81b031916908160001a90535060049490941c93610ec681611c23565b9050610e58565b508315610cb25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106be565b610f3682826040518060200160405280600081525061118a565b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610f6f903390899088908890600401611c3a565b6020604051808303816000875af1925050508015610faa575060408051601f3d908101601f19168201909252610fa791810190611c77565b60015b611005573d808015610fd8576040519150601f19603f3d011682016040523d82523d6000602084013e610fdd565b606091505b508051610ffd576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606081516000141561104257505060408051602081019091526000815290565b6000604051806060016040528060408152602001611c9560409139905060006003845160026110719190611bd6565b61107b9190611b97565b611086906004611c04565b90506000611095826020611bd6565b67ffffffffffffffff8111156110ad576110ad611428565b6040519080825280601f01601f1916602001820160405280156110d7576020820181803683370190505b509050818152600183018586518101602084015b818310156111455760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016110eb565b60038951066001811461115f57600281146111705761117c565b613d3d60f01b60011983015261117c565b603d60f81b6000198301525b509398975050505050505050565b61119483836111f7565b6001600160a01b0383163b15610692576000548281035b6111be6000868380600101945086610f3a565b6111db576040516368d2bf6b60e11b815260040160405180910390fd5b8181106111ab5781600054146111f057600080fd5b5050505050565b6000546001600160a01b03831661122057604051622e076360e81b815260040160405180910390fd5b8161123e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260056020526040902080546801000000000000000185020190554260a01b6001841460e11b1717600082815260046020526040902055808281015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082106112885760005550505050565b6001600160e01b031981168114610b2d57600080fd5b6000602082840312156112fc57600080fd5b8135610cb2816112d4565b60005b8381101561132257818101518382015260200161130a565b83811115610a025750506000910152565b6000815180845261134b816020860160208601611307565b601f01601f19169290920160200192915050565b602081526000610cb26020830184611333565b60006020828403121561138457600080fd5b5035919050565b80356001600160a01b03811681146113a257600080fd5b919050565b600080604083850312156113ba57600080fd5b6113c38361138b565b946020939093013593505050565b6000806000606084860312156113e657600080fd5b6113ef8461138b565b92506113fd6020850161138b565b9150604084013590509250925092565b60006020828403121561141f57600080fd5b610cb28261138b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561145957611459611428565b604051601f8501601f19908116603f0116810190828211818310171561148157611481611428565b8160405280935085815286868601111561149a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126114c557600080fd5b610cb28383356020850161143e565b600080600080600060a086880312156114ec57600080fd5b853567ffffffffffffffff8082111561150457600080fd5b61151089838a016114b4565b9650602088013591508082111561152657600080fd5b61153289838a016114b4565b9550604088013591508082111561154857600080fd5b61155489838a016114b4565b9450606088013591508082111561156a57600080fd5b61157689838a016114b4565b9350608088013591508082111561158c57600080fd5b50611599888289016114b4565b9150509295509295909350565b600080604083850312156115b957600080fd5b6115c28361138b565b9150602083013580151581146115d757600080fd5b809150509250929050565b600080600080608085870312156115f857600080fd5b6116018561138b565b935061160f6020860161138b565b925060408501359150606085013567ffffffffffffffff81111561163257600080fd5b8501601f8101871361164357600080fd5b6116528782356020840161143e565b91505092959194509250565b6000806040838503121561167157600080fd5b61167a8361138b565b91506116886020840161138b565b90509250929050565b600081516116a3818560208601611307565b9290920192915050565b600181811c908216806116c157607f821691505b602082108114156116e257634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c908083168061170257607f831692505b602080841082141561172457634e487b7160e01b600052602260045260246000fd5b818015611738576001811461174957611776565b60ff19861689528489019650611776565b60008881526020902060005b8681101561176e5781548b820152908501908301611755565b505084890196505b50505050505092915050565b60008351611794818460208801611307565b73053454c4543542532302a25323046524f4d2532360641b9083019081526117bf60148201856116e8565b95945050505050565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f72206040820152703737b732bc34b9ba32b73a103a37b5b2b760791b606082015260800190565b73053454c4543542532302a25323046524f4d2532360641b8152600061184260148301856116e8565b74253230574845524525323061727469636c6549643d60581b81528351611870816015840160208801611307565b01601501949350505050565b6000835161188e818460208801611307565b8351908301906118a2818360208801611307565b01949350505050565b600082516118bd818460208701611307565b9190910192915050565b6b024a729a2a92a1024a72a27960a51b815260006118e8600c83018c6116e8565b7f202861727469636c6549642c207469746c652c207461675f312c207461675f3281527f2c207461675f332c20617574686f722c2069706673436964292056414c554553602082015261040560f31b60408201528a5161194f816042840160208f01611307565b0161196260428201622c202760e81b9052565b61196f604582018b611691565b63272c202760e01b8152905060046119898183018b611691565b63272c202760e01b815291506119a18183018a611691565b63272c202760e01b815291506119b981830189611691565b63272c202760e01b815291506119d181830188611691565b63272c202760e01b815291506119e981830187611691565b63272c202760e01b81529150611a0181830186611691565b915050611a128161272960f01b9052565b6002019b9a5050505050505050505050565b60018060a01b03841681528260208201526060604082015260006117bf6060830184611333565b7f7b226e616d65223a22556e626c6f676765642041727469636c65202300000000815260008451611a8381601c850160208901611307565b7f222c20226465736372697074696f6e223a22556e626c6f676765642041727469601c9184019182015264636c65202360d81b603c8201528451611ace816041840160208901611307565b6c1116101134b6b0b3b2911d101160991b60419290910191820152611af6604e8201856116e8565b61227d60f01b81526002019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611b4381601d850160208701611307565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611b7a57611b7a611b50565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611ba657611ba6611b81565b500490565b600082821015611bbd57611bbd611b50565b500390565b600082611bd157611bd1611b81565b500690565b60008219821115611be957611be9611b50565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611c1e57611c1e611b50565b500290565b600081611c3257611c32611b50565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611c6d90830184611333565b9695505050505050565b600060208284031215611c8957600080fd5b8151610cb2816112d456fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122048347c45433c2ffb3ba9b67f48d374ad08fbc838d2ff87892e196b277091757b64736f6c634300080c003368747470733a2f2f746573746e65742e7461626c656c616e642e6e6574776f726b2f71756572793f733d",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806370a08231116100ad578063a22cb46511610071578063a22cb4651461025f578063b88d4fde14610272578063c87b56dd14610285578063e985e9c514610298578063f2fde38b146102d457600080fd5b806370a0823114610218578063715018a61461022b57806386833e91146102335780638da5cb5b1461024657806395d89b411461025757600080fd5b806318160ddd116100f457806318160ddd146101b657806323b872dd146101cc57806342842e0e146101df578063456fb54c146101f25780636352211e1461020557600080fd5b806301ffc9a71461013157806303ee438c1461015957806306fdde031461016e578063081812fc14610176578063095ea7b3146101a1575b600080fd5b61014461013f3660046112ea565b6102e7565b60405190151581526020015b60405180910390f35b610161610339565b604051610150919061135f565b610161610370565b610189610184366004611372565b610402565b6040516001600160a01b039091168152602001610150565b6101b46101af3660046113a7565b610446565b005b600154600054035b604051908152602001610150565b6101b46101da3660046113d1565b6104e6565b6101b46101ed3660046113d1565b610677565b610161610200366004611372565b610697565b610189610213366004611372565b61072d565b6101be61022636600461140d565b610738565b6101b4610787565b6101b46102413660046114d4565b61079b565b6008546001600160a01b0316610189565b610161610919565b6101b461026d3660046115a6565b610928565b6101b46102803660046115e2565b6109be565b610161610293366004611372565b610a08565b6101446102a636600461165e565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6101b46102e236600461140d565b610ab7565b60006301ffc9a760e01b6001600160e01b03198316148061031857506380ac58cd60e01b6001600160e01b03198316145b806103335750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606000610345610c36565b905080600b60405160200161035b929190611782565b60405160208183030381529060405291505090565b60606002805461037f906116ad565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906116ad565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050905090565b600061040d82610c45565b61042a576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006104518261072d565b9050336001600160a01b0382161461048a5761046d81336102a6565b61048a576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006104f182610c6c565b9050836001600160a01b0316816001600160a01b0316146105245760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b038816909114176105715761055486336102a6565b61057157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661059857604051633a954ecd60e21b815260040160405180910390fd5b80156105a357600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b831661062e576001840160008181526004602052604090205461062c57600054811461062c5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b610692838383604051806020016040528060008152506109be565b505050565b60606106a282610c45565b6106c75760405162461bcd60e51b81526004016106be906117c8565b60405180910390fd5b60006106d1610c36565b90506000600b6106e085610b30565b6040516020016106f1929190611819565b6040516020818303038152906040529050818160405160200161071592919061187c565b60405160208183030381529060405292505050919050565b600061033382610c6c565b60006001600160a01b038216610761576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b61078f610cd4565b6107996000610d2e565b565b600f816040516107ab91906118ab565b9081526040519081900360200190205460ff161561081e5760405162461bcd60e51b815260206004820152602a60248201527f556e626c6f676765644e46543a204349442068617320616c7265616479206265604482015269656e206d696e7465642160b01b60648201526084016106be565b600a54600c546000916001600160a01b03169063eaf5d04e903090600b61084486610b30565b8b8b8b8b610853336014610d80565b8c61085d42610b30565b604051602001610875999897969594939291906118c7565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108a293929190611a24565b600060405180830381600087803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b505050506108df336001610f1c565b6001600f836040516108f191906118ab565b908152604051908190036020019020805491151560ff19909216919091179055505050505050565b60606003805461037f906116ad565b6001600160a01b0382163314156109525760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109c98484846104e6565b6001600160a01b0383163b15610a02576109e584848484610f3a565b610a02576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610a1382610c45565b610a2f5760405162461bcd60e51b81526004016106be906117c8565b6000610a3a83610b30565b610a4384610b30565b600e604051602001610a5793929190611a4b565b6040516020818303038152906040529050610a9081604051602001610a7c91906118ab565b604051602081830303815290604052611022565b604051602001610aa09190611b0b565b604051602081830303815290604052915050919050565b610abf610cd4565b6001600160a01b038116610b245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106be565b610b2d81610d2e565b50565b606081610b545750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b7e5780610b6881611b66565b9150610b779050600a83611b97565b9150610b58565b60008167ffffffffffffffff811115610b9957610b99611428565b6040519080825280601f01601f191660200182016040528015610bc3576020820181803683370190505b5090505b8415610c2e57610bd8600183611bab565b9150610be5600a86611bc2565b610bf0906030611bd6565b60f81b818381518110610c0557610c05611bee565b60200101906001600160f81b031916908160001a905350610c27600a86611b97565b9450610bc7565b949350505050565b60606009805461037f906116ad565b6000805482108015610333575050600090815260046020526040902054600160e01b161590565b600081600054811015610cbb57600081815260046020526040902054600160e01b8116610cb9575b80610cb2575060001901600081815260046020526040902054610c94565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6008546001600160a01b031633146107995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106be565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610d8f836002611c04565b610d9a906002611bd6565b67ffffffffffffffff811115610db257610db2611428565b6040519080825280601f01601f191660200182016040528015610ddc576020820181803683370190505b509050600360fc1b81600081518110610df757610df7611bee565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610e2657610e26611bee565b60200101906001600160f81b031916908160001a9053506000610e4a846002611c04565b610e55906001611bd6565b90505b6001811115610ecd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610e8957610e89611bee565b1a60f81b828281518110610e9f57610e9f611bee565b60200101906001600160f81b031916908160001a90535060049490941c93610ec681611c23565b9050610e58565b508315610cb25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106be565b610f3682826040518060200160405280600081525061118a565b5050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290610f6f903390899088908890600401611c3a565b6020604051808303816000875af1925050508015610faa575060408051601f3d908101601f19168201909252610fa791810190611c77565b60015b611005573d808015610fd8576040519150601f19603f3d011682016040523d82523d6000602084013e610fdd565b606091505b508051610ffd576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606081516000141561104257505060408051602081019091526000815290565b6000604051806060016040528060408152602001611c9560409139905060006003845160026110719190611bd6565b61107b9190611b97565b611086906004611c04565b90506000611095826020611bd6565b67ffffffffffffffff8111156110ad576110ad611428565b6040519080825280601f01601f1916602001820160405280156110d7576020820181803683370190505b509050818152600183018586518101602084015b818310156111455760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016110eb565b60038951066001811461115f57600281146111705761117c565b613d3d60f01b60011983015261117c565b603d60f81b6000198301525b509398975050505050505050565b61119483836111f7565b6001600160a01b0383163b15610692576000548281035b6111be6000868380600101945086610f3a565b6111db576040516368d2bf6b60e11b815260040160405180910390fd5b8181106111ab5781600054146111f057600080fd5b5050505050565b6000546001600160a01b03831661122057604051622e076360e81b815260040160405180910390fd5b8161123e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260056020526040902080546801000000000000000185020190554260a01b6001841460e11b1717600082815260046020526040902055808281015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48082106112885760005550505050565b6001600160e01b031981168114610b2d57600080fd5b6000602082840312156112fc57600080fd5b8135610cb2816112d4565b60005b8381101561132257818101518382015260200161130a565b83811115610a025750506000910152565b6000815180845261134b816020860160208601611307565b601f01601f19169290920160200192915050565b602081526000610cb26020830184611333565b60006020828403121561138457600080fd5b5035919050565b80356001600160a01b03811681146113a257600080fd5b919050565b600080604083850312156113ba57600080fd5b6113c38361138b565b946020939093013593505050565b6000806000606084860312156113e657600080fd5b6113ef8461138b565b92506113fd6020850161138b565b9150604084013590509250925092565b60006020828403121561141f57600080fd5b610cb28261138b565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561145957611459611428565b604051601f8501601f19908116603f0116810190828211818310171561148157611481611428565b8160405280935085815286868601111561149a57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126114c557600080fd5b610cb28383356020850161143e565b600080600080600060a086880312156114ec57600080fd5b853567ffffffffffffffff8082111561150457600080fd5b61151089838a016114b4565b9650602088013591508082111561152657600080fd5b61153289838a016114b4565b9550604088013591508082111561154857600080fd5b61155489838a016114b4565b9450606088013591508082111561156a57600080fd5b61157689838a016114b4565b9350608088013591508082111561158c57600080fd5b50611599888289016114b4565b9150509295509295909350565b600080604083850312156115b957600080fd5b6115c28361138b565b9150602083013580151581146115d757600080fd5b809150509250929050565b600080600080608085870312156115f857600080fd5b6116018561138b565b935061160f6020860161138b565b925060408501359150606085013567ffffffffffffffff81111561163257600080fd5b8501601f8101871361164357600080fd5b6116528782356020840161143e565b91505092959194509250565b6000806040838503121561167157600080fd5b61167a8361138b565b91506116886020840161138b565b90509250929050565b600081516116a3818560208601611307565b9290920192915050565b600181811c908216806116c157607f821691505b602082108114156116e257634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c908083168061170257607f831692505b602080841082141561172457634e487b7160e01b600052602260045260246000fd5b818015611738576001811461174957611776565b60ff19861689528489019650611776565b60008881526020902060005b8681101561176e5781548b820152908501908301611755565b505084890196505b50505050505092915050565b60008351611794818460208801611307565b73053454c4543542532302a25323046524f4d2532360641b9083019081526117bf60148201856116e8565b95945050505050565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f72206040820152703737b732bc34b9ba32b73a103a37b5b2b760791b606082015260800190565b73053454c4543542532302a25323046524f4d2532360641b8152600061184260148301856116e8565b74253230574845524525323061727469636c6549643d60581b81528351611870816015840160208801611307565b01601501949350505050565b6000835161188e818460208801611307565b8351908301906118a2818360208801611307565b01949350505050565b600082516118bd818460208701611307565b9190910192915050565b6b024a729a2a92a1024a72a27960a51b815260006118e8600c83018c6116e8565b7f202861727469636c6549642c207469746c652c207461675f312c207461675f3281527f2c207461675f332c20617574686f722c2069706673436964292056414c554553602082015261040560f31b60408201528a5161194f816042840160208f01611307565b0161196260428201622c202760e81b9052565b61196f604582018b611691565b63272c202760e01b8152905060046119898183018b611691565b63272c202760e01b815291506119a18183018a611691565b63272c202760e01b815291506119b981830189611691565b63272c202760e01b815291506119d181830188611691565b63272c202760e01b815291506119e981830187611691565b63272c202760e01b81529150611a0181830186611691565b915050611a128161272960f01b9052565b6002019b9a5050505050505050505050565b60018060a01b03841681528260208201526060604082015260006117bf6060830184611333565b7f7b226e616d65223a22556e626c6f676765642041727469636c65202300000000815260008451611a8381601c850160208901611307565b7f222c20226465736372697074696f6e223a22556e626c6f676765642041727469601c9184019182015264636c65202360d81b603c8201528451611ace816041840160208901611307565b6c1116101134b6b0b3b2911d101160991b60419290910191820152611af6604e8201856116e8565b61227d60f01b81526002019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611b4381601d850160208701611307565b91909101601d0192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611b7a57611b7a611b50565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611ba657611ba6611b81565b500490565b600082821015611bbd57611bbd611b50565b500390565b600082611bd157611bd1611b81565b500690565b60008219821115611be957611be9611b50565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615611c1e57611c1e611b50565b500290565b600081611c3257611c32611b50565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611c6d90830184611333565b9695505050505050565b600060208284031215611c8957600080fd5b8151610cb2816112d456fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122048347c45433c2ffb3ba9b67f48d374ad08fbc838d2ff87892e196b277091757b64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(string,string,string,string,string)": {
        "details": "mint allows anyone to mint a token in this project. Any time a token is minted, a new row of metadata will be dynamically inserted into the metadata table."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "tokenURI is an example of how to turn a row in your table back into erc721 compliant metadata JSON. Here, we do a simple SELECT statement with function that converts the result into json."
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see `_totalMinted`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "ApproveToCaller()": [
        {
          "notice": "The caller cannot approve to their own address."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "tablelandURI(uint256)": {
        "notice": "Get the URL String of the tableland query"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1836,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1838,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1840,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1842,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1846,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1850,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1854,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1860,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1346,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4224,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_baseURIString",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 4227,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_tableland",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ITablelandTables)3739"
      },
      {
        "astId": 4229,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_metadataTable",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4231,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_metadataTableId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4234,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_tablePrefix",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 4236,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "_defaultNFTImage",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 4240,
        "contract": "contracts/UnbloggedNFT.sol:UnbloggedNFT",
        "label": "cidMinted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITablelandTables)3739": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}